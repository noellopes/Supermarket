@using Supermarket.Models
@model IEnumerable<Schedule>
@{
    ViewData["Title"] = "Index";
}

<h1>Index</h1>
@if (ViewBag.Message != null)
{
    <div class="alert alert-success" role="alert">
        <h4 class="alert-heading">Success</h4>
        <p>@ViewBag.Message</p>
    </div>
}

<div class="card">
    <div class="card-body">
        <form asp-action="Index" method="get">
            <strong>Search Horarios</strong>
            <label for="title" class="control-label"></label>
            <input id="title" class="form-control" />

            <label for="author" class="control-label"></label>
            <input id="author" class="form-control" />
            <div class="mt-3">
                <button class="btn btn-primary" type="submit" value="Search">Search</button>
                <button class="btn btn-secondary" asp-action="Index">Cancel</button>
            </div>
        </form>
    </div>
</div>
<hr />
<p>
    <a asp-action="Create">Create New Schedule</a>
</p>
@*<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.StartDate)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.EndDate)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.DailyStartTime)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.DailyFinishTime)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.IDDepartments)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>*@
<div class="row">

    @foreach (var item in Model)
    {
        Console.WriteLine($"Schedule ID: {item.ScheduleId}");
        Console.WriteLine($"Department ID: {item.IDDepartments}");
        <div class="col mt-3">
            <div class="card text-center" style="width: 18rem;">
                @* <img class="card-img-top" src="..." alt="Card image cap">*@
                <div class="card-body">
                    <h5 class="card-title">Horário @Html.DisplayFor(modelItem => item.ScheduleId) </h5>
                    @if (item.IDDepartments == 0)
                    {

                        <p class="card-text">Sem departamento</p>
                    }
                    else if (item.Departments != null)
                    {
                        <p>Departamento</p>
                        <p class="card-text">@item.Departments.NameDepartments</p>
                    }
                    else
                    {
                        <p>Departamento</p>
                        <p class="card-text">Unknown department</p>
                    }
                    @* <p class="card-text">@Html.DisplayFor(modelItem => item.Departments.NameDepartments)</p> *@
                </div>
                <ul class="list-group list-group-flush">
                    @{
                        string Data = item.StartDate.ToString("dd/MM/yyyy");
                        <li class="list-group-item"> Data em que entra em vigor: <p>@Html.DisplayFor(modelItem => Data)</p></li>
                        }
                    <li class="list-group-item">
                        Data em que termina:
                        @*@Html.DisplayFor(modelItem => item.EndDate??.ToString("dd/MM/yyyy"))*@
                        @{
                            if (item.EndDate.HasValue==false)
                            {
                                <p>Indeterminado</p>
                            } else
                            {
                                <p>@item.EndDate.Value.ToString("dd/MM/yyyy")</p>
                            }
                        }
                        
                    </li>
                    <li class="list-group-item">Hora de começo diário: <p>@item.DailyStartTime.ToString("hh:mm")</p> </li>
                    <li class="list-group-item">Hora de término diário: <p>@item.DailyFinishTime.ToString("hh:mm")</p> </li>
                </ul>
                <div class="card-body">
                    <a asp-action="Edit" asp-route-id="@item.ScheduleId" class="card-link">Edit</a>
                    <a asp-action="Details" asp-route-id="@item.ScheduleId" class="card-link">Details</a>
                    <a asp-action="Delete" asp-route-id="@item.ScheduleId" class="card-link">Delete</a>
                </div>
            </div>
        </div>

    }
</div>
<nav aria-label="..." class="mt-5">
    <ul class="pagination">
        <li class="page-item disabled">
            <a class="page-link" href="#" tabindex="-1">Previous</a>
        </li>
        <li class="page-item"><a class="page-link" href="#">1</a></li>
        <li class="page-item active">
            <a class="page-link" href="#">2 <span class="sr-only">(current)</span></a>
        </li>
        <li class="page-item"><a class="page-link" href="#">3</a></li>
        <li class="page-item">
            <a class="page-link" href="#">Next</a>
        </li>
    </ul>
</nav>
<hr class="mt-5" />
<h1> Função de Cálculo de Pico de Afluência</h1>

<div class="accordion mt-5" id="accordionExample">
    <div class="accordion-item">
        <h2 class="accordion-header" id="headingOne">
            <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
                Departamento #1
            </button>
        </h2>
        <div id="collapseOne" class="accordion-collapse collapse show" aria-labelledby="headingOne" data-bs-parent="#accordionExample">
            <div class="accordion-body">
                <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.
            </div>
        </div>
    </div>
    <div class="accordion-item">
        <h2 class="accordion-header" id="headingTwo">
            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseTwo" aria-expanded="false" aria-controls="collapseTwo">
                Departamento #2
            </button>
        </h2>
        <div id="collapseTwo" class="accordion-collapse collapse" aria-labelledby="headingTwo" data-bs-parent="#accordionExample">
            <div class="accordion-body">
                <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.
            </div>
        </div>
    </div>
    <div class="accordion-item">
        <h2 class="accordion-header" id="headingThree">
            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseThree" aria-expanded="false" aria-controls="collapseThree">
                Departamento #3
            </button>
        </h2>
        <div id="collapseThree" class="accordion-collapse collapse" aria-labelledby="headingThree" data-bs-parent="#accordionExample">
            <div class="accordion-body">
                <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.
            </div>
        </div>
    </div>
</div>