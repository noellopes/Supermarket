@model ProductsListViewModel
@using Microsoft.AspNetCore.Mvc.Rendering

@{
    ViewData["Title"] = "Departamentos";
}

<div class="mt-2 mb-2">
<h1>Departamentos</h1>
</div>
<div class="containerPesquisa">
    <div class="row">
        <div class="col-12 col-md-4">
            <form asp-controller="Departments" asp-action="pesqNomeTrue" method="get">
                <div class="input-group">
                    <input type="search" name="searchTerm" class="form-control rounded" placeholder="Search" aria-label="Search" aria-describedby="search-addon" />
                    <button type="submit" class="btn btn-outline-primary" data-mdb-ripple-init>Pesquisa</button>
                    <button type="button" class="btn btn-outline-danger">Limpar</button>
                    @if (ViewBag.Message != null)
                    {
                        <div class="alert alert-warning" role="alert">
                            @ViewBag.Message
                        </div>
                    }
                </div>
            </form>
        </div>       
    </div>
</div>
<div class= "mt-3 mb-3" >
    <a asp-action="Create" class="btn btn-primary">Novo Departamento</a>
    <a asp-action="DepInop" class="btn btn-primary">Departamentos Inativos</a>
</div>
<table class="table">
    <thead>
        <tr>
            <th>
             Nome do Departamento
            </th>
            <th>
             Descrição do Departamento
            </th>
            <th>
             Estado do Departamento
            </th>
            <th>
             Formação Nessesaria   
            </th>
            <th>
             Numero de senhas para a calculo media 
            </th>
            <th>
             Tempo de atendimento medio por dia 
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model.Departments)
        {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.NameDepartments)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.DescriptionDepartments)
            </td>
            <td>
                @(item.StateDepartments ? "Activo" : "Desativo")
             </td>
            <td>
                @Html.DisplayFor(modelItem => item.SkillsDepartments)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.QuatDepMed)
            </td>
            <td>
                10mins
            </td>
            <td>
                <div class="btn-group" role="group" aria-label="Edit,Details,Delete">
                        <a asp-action="Edit" asp-route-id="@item.IDDepartments" class="btn btn-outline-success">Edit</a>
                        <a asp-action="Details" asp-route-id="@item.IDDepartments" class="btn btn-outline-dark">Details</a>
                        <a asp-action="Delete" asp-route-id="@item.IDDepartments" class="btn btn-outline-danger"
                 onclick="return confirm('Are you sure you want to delete this item?');">Delete</a>
                </div>
            </td>
        </tr>
}
    </tbody>
</table>
<nav aria-label="Page navigation">
    <ul class="pagination">
        @{
            int initialPage = Model.Pagination.CurrentPage - PagingInfo.NUMBER_PAGES_SHOW_BEFORE_AFTER;
            if (initialPage < 1) initialPage = 1;

            int finalPage = Model.Pagination.CurrentPage + PagingInfo.NUMBER_PAGES_SHOW_BEFORE_AFTER;
            if (finalPage > Model.Pagination.TotalPages) finalPage = Model.Pagination.TotalPages;
        }

        @for (int p = initialPage; p <= finalPage; p++)
        {
            <li class="page-item @(p == Model.Pagination.CurrentPage ? "active" : "")">
                @if (p == Model.Pagination.CurrentPage)
                {
                    <span class="page-link">@p <span class="sr-only">(current)</span></span>
                }
                else
                {
                    <a class="page-link" asp-action="Index" asp-route-page="@p">@p</a>
                }
            </li>
        }
    </ul>
</nav>
